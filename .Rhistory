devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
rm(list = ls())
devtools::document()
devtools::check()
# Function: my_knn_cv
# Description: runs k-fold cross validations for k-nearest neighbors
# Input: data, the input data frame (note in the document this is called train),
#        cl, the true class values of the data,
#        k_nn, an integer representing the number of neighbors for KNN,
#        k_cv, the number of folds
# Output: class, a vector of the predicted classes when KNN trains on the entire data set,
#         cv_err, the cross-validaiton misclassification error
my_knn_cv <- function(data, cl, k_nn, k_cv) {
n <-  length(data[, 1])
# randomly assign each entry in the data set to a fold
fold <- sample(rep(1:k_cv, length = n))
data$fold <- fold
cl <- data.frame(cl, fold)
miss_rates <- c()
# loop through each fold
for (i in 1:k_cv) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
cl_train <- (cl %>% filter(fold != i))[, 1]
cl_test <- (cl %>% filter(fold == i))[, 1]
# remove fold from the train/test data
data_train <- data_train[, -length(data_train)]
data_test <- data_test[, -length(data_test)]
knn_cv <- class::knn(train = data_train,
test = data_test,
cl = cl_train,
k = k_nn)
# record misclassification rates
miss_rates[i] <- mean(as.numeric(knn_cv != cl_test))
}
#remove fold from data
data <- data[, -length(data)]
class <- class::knn(train = data,
test = data,
cl = cl[, 1],
k = k_nn)
# calculate the proportion of misclassifications
cv_err <- mean(miss_rates)
# return the classifications and the misclassification error
return(list(class = class, cv_err = cv_err))
}
set.seed(123)
# remove NAs from penguins
penguins_no_NA <- na.omit(penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
# run the function with different values of k_nn
one_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 1,
k_cv = 5)
three_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 3,
k_cv = 5)
five_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 5,
k_cv = 5)
ten_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 10,
k_cv = 5)
twenty_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 20,
k_cv = 5)
# determine the training error for each value of k_nn
one_train_err <- mean(one_nn_cv[[1]] != my_cl)
three_train_err <- mean(three_nn_cv[[1]] != my_cl)
five_train_err <- mean(five_nn_cv[[1]] != my_cl)
ten_train_err <- mean(ten_nn_cv[[1]] != my_cl)
twenty_train_err <- mean(twenty_nn_cv[[1]] != my_cl)
# create a table with the results
my_table <- data.frame(k_nn = c(1, 3, 5, 10, 20),
cv_err = round(c(one_nn_cv[[2]],
three_nn_cv[[2]],
five_nn_cv[[2]],
ten_nn_cv[[2]],
twenty_nn_cv[[2]]), 4),
train_err = round(c(one_train_err,
three_train_err,
five_train_err,
ten_train_err,
twenty_train_err), 4))
kable_styling(kable(my_table))
devtools::document()
rm(list = ls())
devtools::document()
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
utils::globalVariables(c("bill_length_mm", "bill_depth_mm", "body_mass_g", "flipper_length_mm"))
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- stats::na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
train_miss <- c()
cv_miss <- c()
# find the training and cv misclassification rates for k_nn from 1 through 10
for(k_nn in 1:10) {
my_knn_cv_out <- my_knn_cv(data = my_data, cl = my_cl, k_nn = k_nn, k_cv = 5)
train_miss[k_nn] <- mean(my_knn_cv_out[[1]] != my_cl)
cv_miss[k_nn] <- my_knn_cv_out[[2]]
}
# create a table with the results
my_table <- data.frame(k_nn = 1:10,
cv_err = round(cv_miss, 4),
train_err = round(train_miss, 4))
kableExtra::kable_styling(kableExtra::kable(my_table))
devtools::check()
devtools::check()
devtools::check()
my_t.test
project3part1package::my_penguins
t.test(my_penguins$bill_depth_mm, "two.sided", 20)
t.test(x =my_penguins$bill_depth_mm, "two.sided", 20)
?t.tesst
?t.test
t.test(x = my_penguins$bill_depth_mm,alternative =  "two.sided", mu = 20)
t.test(x = my_penguins$bill_depth_mm,alternative =  "two.sided", mu = 20)$t
t.test(x = my_penguins$bill_depth_mm,alternative =  "two.sided", mu = 20)$statistic
devtools::check()
my_t.test(x = my_penguins$bill_depth_mm, alternative = "two.sided", mu = 20)$test_stat
my_t.test(x = my_penguins$bill_depth_mm, alternative = "two.sided", mu = 20)
my_penguins <- stats::na.omit(project3part1package::my_penguins)
my_t.test(x = my_penguins$bill_depth_mm, alternative = "two.sided", mu = 20)
my_t.test(x = my_penguins$bill_depth_mm, alternative = "two.sided", mu = 20)$test_stat
t.test(x = my_penguins$bill_depth_mm, alternative = "two.sided", mu = 20)$statistic
-26.27231 == -26.27231
devtools::check()
my_data <- stats::na.omit(project3part1package::my_penguins)
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$test_stat
t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$statistic
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$test_stat == t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$statistic
t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$statistic
as.numeric(t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$statistic)
devtools::check()
devtools::check()
my_data <- stats::na.omit(project3part1package::my_penguins)
t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$statistic
t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$p_val
t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)
vals <- t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)
vals$df
vals$alternative
vals$alternative
vals
vals$parameter
devtools::check()
devtools::check()
t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$alternative
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$alternative
as.numeric(t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$parameter)
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$df
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$p_value
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)
devtools::check()
devtools::check()
my_data$bill_depth_mm
list(my_data$bill_depth_mm, "a")
data.frame(c("a","b","c"))
devtools::check()
install.packages("covr")
library(covr)
usethis::use_test("my_lm")
usethis::use_test("my_knn_cv")
usethis::use_test("my_rf_cv")
usethis::use_github_action("test-coverage")
usethis::use_github_action("test-coverage")
usethis::use_github_action("test-coverage")
my_rf_cv(5)
type_of(my_rf_cv(5))
typeof(my_rf_cv(5))
devtools::check()
usethis::use_github_action("test-coverage")
usethis::use_github_action("test-coverage")
my_rf_cv(-1)
my_rf_cv(-1)
devtools::check()
my_rf_cv(-1)
expect_error(my_rf_cv("test"))
my_rf_cv("test"))
my_rf_cv("test")
my_rf_cv(5.2)
typeof(5)
typeof(-1)
x <- 1
typeof(x)
is.integer(3)
5.2 %% 1
round(5.2)
x
x == round(X)
x == round(x)
x != round(x)
devtools::check()
my_rf_cv(5)
my_rf_cv(100)
my_rf_cv(10)
my_rf_cv(1)
my_rf_cv(1)
devtools::check()
my_gapminder
my_gapminder$pop
mean(my_gapminder$pop)
usethis::use_github_action("test-coverage")
usethis::use_github_action("test-coverage")
tibble
usethis::use_package("tibble")
devtools::check()
usethis::use_package("covr")
devtools::check()
my_data <- stats::na.omit(project3part1package::my_penguins)
my_data$bill_depth_mm
my_test <- my_data$bill_depth_mm
my_test[1]
my_test[1] <- "a"
my_test
devtools::check()
my_t.test(x = my_data$bill_depth_mm, alternative = "less", mu = 20)
typeof(my_t.test(x = my_data$bill_depth_mm, alternative = "less", mu = 20)
)
devtools::check()
my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
typeof(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder))
length(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder))
col(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder))
cols(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder))
my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[1,1]
my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[1,2]
my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[2,1]
my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[ ,1]
length(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[ ,1])
length(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[, 1])
length(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[1, ])
devtools::check()
my_lm(lifeExp ~ gdpPercap + continent + notavar, data = my_data)
my_data <- stats::na.omit(project3part1package::my_gapminder)
my_lm(lifeExp ~ gdpPercap + continent + notavar, data = my_data)
my_lm(formula = "string", data = my_data)
length(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[1, ])
length(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[, 1])
my_lm(formula = "string", data = my_data)
devtools::check()
devtools::check()
my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
c(my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder))
c(lm(lifeExp ~ gdpPercap + continent, data = my_gapminder))
c(lm(lifeExp ~ gdpPercap + continent, data = my_gapminder))[1]
lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)$coefficients
lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)$coefficients[1]
lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)$coefficients[2]
c(lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)$coefficients)
my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[1, ]
my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)[, 1]
devtools::check()
my_data <- stats::na.omit(project3part1package::my_penguins)
my_data
my_penguins <- stats::na.omit(project3part1package::my_penguins)
penguins_no_NA <- stats::na.omit(my_penguins)
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_data_with_NA <- data.frame("bill_length" = my_penguins$bill_length_mm,
"bill_depth" = my_penguins$bill_depth_mm,
"flipper_length" = my_penguins$flipper_length_mm,
"body_mass" = my_penguins$body_mass_g)
my_cl <- penguins_no_NA$species
my_cl_with_NA  <- my_penguins$species
my_knn_cv(data = my_data_with_NA, cl = my_cl_with_NA, k_nn = 2, k_cv = 5)
my_data_with_NA
my_data_with_NA
my_data_with_NA[1,1]
my_penguins <- stats::na.omit(project3part1package::my_penguins)
penguins_no_NA <- stats::na.omit(my_penguins)
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_data_with_NA <- data.frame("bill_length" = my_penguins$bill_length_mm,
"bill_depth" = my_penguins$bill_depth_mm,
"flipper_length" = my_penguins$flipper_length_mm,
"body_mass" = my_penguins$body_mass_g)
my_data_with_NA[1, 1] <- NA
my_cl <- penguins_no_NA$species
my_cl_with_NA  <- my_penguins$species
my_knn_cv(data = my_data_with_NA, cl = my_cl_with_NA, k_nn = 2, k_cv = 5)
devtools::check()
my_penguins <- stats::na.omit(project3part1package::my_penguins)
penguins_no_NA <- stats::na.omit(my_penguins)
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_data_with_NA <- data.frame("bill_length" = my_penguins$bill_length_mm,
"bill_depth" = my_penguins$bill_depth_mm,
"flipper_length" = my_penguins$flipper_length_mm,
"body_mass" = my_penguins$body_mass_g)
my_data_with_NA[1, 1] <- NA
my_data_add_NA <- my_data
my_data_add_NA[1, 1] <- NA
my_cl <- penguins_no_NA$species
my_cl_with_NA  <- my_penguins$species
my_cl_add_NA <- my_cl
my_cl_add_NA[1, 1] <- NA
my_cl_add_NA[1] <- NA
my_cl_add_NA
my_knn_cv(data = my_data_with_NA, cl = my_cl_with_NA, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl_add_NA, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data_addNA, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
typeof(my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5))
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_data <- stats::na.omit(project3part1package::my_penguins)
y_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)
length(my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20))
length(my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20))[1]
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)[1]
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)[2]
my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)[3]
typeof(my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)[3])
typeof(my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)[3, ])
devtools::check()
typeof(my_t.test(x = my_data$bill_depth_mm, alternative = "two.sided", mu = 20)$alternative)
devtools::check()
is.vector(c(1,2,3))
is.vector(c(1,2,"a"))
is.vector(list(1,2,3))
is.vector(list(1,2,"a"))
my_penguins <- stats::na.omit(project3part1package::my_penguins)
penguins_no_NA <- stats::na.omit(my_penguins)
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_data_with_NA <- data.frame("bill_length" = my_penguins$bill_length_mm,
"bill_depth" = my_penguins$bill_depth_mm,
"flipper_length" = my_penguins$flipper_length_mm,
"body_mass" = my_penguins$body_mass_g)
my_data_with_NA[1, 1] <- NA
my_data_add_NA <- my_data
my_data_add_NA[1, 1] <- NA
my_cl <- penguins_no_NA$species
my_cl_with_NA  <- my_penguins$species
my_cl_add_NA <- my_cl
my_cl_add_NA[1] <- NA
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)$class
typeof(my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)$class)
length(expect_type(my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)$cv_err, "double"))
length(my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)$class)
length(my_cl)
my_cl
devtools::check()
my_cv_MSEs <- matrix(NA, nrow = 30, ncol = 3)
my_cv_MSEs
library(project3part1package)
my_cv_MSEs <- matrix(NA, nrow = 30, ncol = 3)
counter <- 1
for (k in c(2, 5, 10)) {
k_MSE <- c()
for (i in 1:30) {
k_MSE[i] <- my_rf_cv(k)
}
my_cv_MSEs[counter] <- k_MSE
counter <- counter + 1
}
k_MSE <- c()
for (i in 1:30) {
k_MSE[i] <- my_rf_cv(k)
}
k_MSE
length(k_MSE)
my_cv_MSEs[, 1] <- k_MSE
my_cv_MSEs
my_cv_MSEs <- matrix(NA, nrow = 30, ncol = 3)
counter <- 1
for (k in c(2, 5, 10)) {
k_MSE <- c()
for (i in 1:30) {
k_MSE[, i] <- my_rf_cv(k)
}
my_cv_MSEs[counter] <- k_MSE
counter <- counter + 1
}
my_cv_MSEs <- matrix(NA, nrow = 30, ncol = 3)
counter <- 1
for (k in c(2, 5, 10)) {
k_MSE <- c()
for (i in 1:30) {
k_MSE[i] <- my_rf_cv(k)
}
my_cv_MSEs[, counter] <- k_MSE
counter <- counter + 1
}
data.frame(my_cv_MSEs)
my_cv_MSEs <- matrix(NA, nrow = 30, ncol = 3)
counter <- 1
for (k in c(2, 5, 10)) {
k_MSE <- c()
for (i in 1:30) {
k_MSE[i] <- my_rf_cv(k)
}
my_cv_MSEs[, counter] <- k_MSE
counter <- counter + 1
}
my_cv_MSEs <- data.frame(my_cv_MSEs)
ggplot2::ggplot(my_cv_MSEs) +
geom_boxplot(aes(x = ind, y = values))
ggplot2::ggplot(my_cv_MSEs) +
ggplot2::geom_boxplot(aes(x = ind, y = values))
ggplot2::ggplot(my_cv_MSEs) +
ggplot2::geom_boxplot(ggplot2::aes(x = ind, y = values))
ggplot2::ggplot(my_cv_MSEs) +
ggplot2::geom_boxplot()
colnames(my_cv_MSEs) <- c("2", "5", "10")
my_cv_MSEs
(counter * 30 + 1):(counter * 30 + 30)
my_cv_MSEs <- matrix(NA, nrow = 90, ncol = 2)
counter <- 0
for (k in c(2, 5, 10)) {
k_MSE <- c()
for (i in 1:30) {
k_MSE[i] <- my_rf_cv(counter * 30 + k)
}
my_cv_MSEs[, 1] <- k_MSE
my_cv_MSEs[(counter * 30 + 1):(counter * 30 + 30) , 2] <- k
counter <- counter + 1
}
my_cv_MSEs <- data.frame(my_cv_MSEs)
colnames(my_cv_MSEs) <- c("cv MSE", "k")
my_cv_MSEs
colnames(my_cv_MSEs) <- c("cv_MSE", "k")
ggplot2::ggplot(my_cv_MSEs, ggplot2::aes(x = cv_MSE, y = k)) +
ggplot2::geom_boxplot()
my_cv_MSEs
my_cv_MSEs[, 2] <- as.factor(my_cv_MSEs[, 2])
my_cv_MSEs
ggplot2::ggplot(my_cv_MSEs, ggplot2::aes(x = cv_MSE, y = k)) +
ggplot2::geom_boxplot()
ggplot2::ggplot(my_cv_MSEs, ggplot2::aes(x = k, y = cv_MSE)) +
ggplot2::geom_boxplot()
ggplot2::ggplot(my_cv_MSEs, ggplot2::aes(x = k, y = cv_MSE)) +
ggplot2::geom_boxplot()
rep(2,10)
my_cv_MSEs <- matrix(NA, nrow = 30, ncol = 3)
counter <- 1
for (k in c(2, 5, 10)) {
k_MSE <- c()
for (i in 1:30) {
k_MSE[i] <- my_rf_cv(k)
}
my_cv_MSEs[, counter] <- k_MSE
counter <- counter + 1
}
cv_MSEs_data <- data.frame(matrix(c(my_cv_MSE[, 1], my_cv_MSE[, 2], my_cv_MSE[, 3]),
c(rep(2, 30), rep(5, 30), rep(10, 30))))
my_cv_MSEs
my_cv_MSEs[, 1]
cv_MSEs_data <- data.frame(matrix(c(my_cv_MSEs[, 1], my_cv_MSEs[, 2], my_cv_MSEs[, 3]),
c(rep(2, 30), rep(5, 30), rep(10, 30))))
colnames(cv_MSEs_data) <- c("cv_MSE", "k")
cv_MSEs_data[, 2] <- as.factor(cv_MSEs_data[, 2])
cv_MSEs_data
cv_MSEs_data <- data.frame("cv_MSE" = c(my_cv_MSEs[, 1], my_cv_MSEs[, 2], my_cv_MSEs[, 3]),
"k" = c(rep(2, 30), rep(5, 30), rep(10, 30)))
cv_MSEs_data
cv_MSEs_data[, 2] <- as.factor(cv_MSEs_data[, 2])
ggplot2::ggplot(my_cv_MSEs, ggplot2::aes(x = k, y = cv_MSE)) +
ggplot2::geom_boxplot()
ggplot2::ggplot(cv_MSEs_data, ggplot2::aes(x = k, y = cv_MSE)) +
ggplot2::geom_boxplot()
ggplot2::ggplot(cv_MSEs_data, ggplot2::aes(x = k, y = cv_MSE)) +
ggplot2::geom_boxplot()
ggplot2::ggplot(cv_MSEs_data, ggplot2::aes(x = k, y = cv_MSE)) +
ggplot2::geom_boxplot()
my_MSE_table <- matrix(NA, nrow = 3, ncol = 2)
my_MSE_table[1, 1] <- mean(my_cv_MSEs[, 1])
my_MSE_table[2, 1] <- mean(my_cv_MSEs[, 2])
my_MSE_table[3, 1] <- mean(my_cv_MSEs[, 3])
my_MSE_table[1, 2] <- sd(my_cv_MSEs[, 1])
my_MSE_table[2, 2] <- sd(my_cv_MSEs[, 2])
my_MSE_table[3, 2] <- sd(my_cv_MSEs[, 3])
my_MSE_table <- data.frame(my_MSE_table)
colnames(my_MSE_table) <- c("mean", "standard deviation")
rownames(my_MSE_table) <- c("2", "5", "10")
kableExtra::kable_styling(kableExtra::kable(my_MSE_table))
