# remove NAs from penguins
penguins_no_NA <- na.omit(penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
# run the function with different values of k_nn
one_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 1,
k_cv = 5)
three_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 3,
k_cv = 5)
five_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 5,
k_cv = 5)
ten_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 10,
k_cv = 5)
twenty_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 20,
k_cv = 5)
# determine the training error for each value of k_nn
one_train_err <- mean(one_nn_cv[[1]] != my_cl)
three_train_err <- mean(three_nn_cv[[1]] != my_cl)
five_train_err <- mean(five_nn_cv[[1]] != my_cl)
ten_train_err <- mean(ten_nn_cv[[1]] != my_cl)
twenty_train_err <- mean(twenty_nn_cv[[1]] != my_cl)
# create a table with the results
my_table <- data.frame(k_nn = c(1, 3, 5, 10, 20),
cv_err = round(c(one_nn_cv[[2]],
three_nn_cv[[2]],
five_nn_cv[[2]],
ten_nn_cv[[2]],
twenty_nn_cv[[2]]), 4),
train_err = round(c(one_train_err,
three_train_err,
five_train_err,
ten_train_err,
twenty_train_err), 4))
kable_styling(kable(my_table))
# Function: my_knn_cv
# Description: runs k-fold cross validations for k-nearest neighbors
# Input: data, the input data frame (note in the document this is called train),
#        cl, the true class values of the data,
#        k_nn, an integer representing the number of neighbors for KNN,
#        k_cv, the number of folds
# Output: class, a vector of the predicted classes when KNN trains on the entire data set,
#         cv_err, the cross-validaiton misclassification error
my_knn_cv <- function(data, cl, k_nn, k_cv) {
n <-  length(data[, 1])
# randomly assign each entry in the data set to a fold
fold <- sample(rep(1:k_cv, length = n))
data$fold <- fold
cl <- data.frame(cl, fold)
miss_rates <- c()
# loop through each fold
for (i in 1:k_cv) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
# remove fold from the train/test data
data_train <- data_train[, -length(data_train)]
data_test <- data_test[, -length(data_test)]
cl_train <- (cl %>% filter(fold != i))[, 1]
cl_test <- (cl %>% filter(fold == i))[, 1]
knn_cv <- knn(train = data_train,
test = data_test,
cl = cl_train,
k = k_nn)
# record misclassification rates
miss_rates[i] <- mean(as.numeric(knn_cv != cl_test))
}
browser()
#remove fold from data
data <- data[, -length(data)]
class <- knn(train = data,
test = data,
cl = cl[, 1],
k = k_nn)
# calculate the proportion of misclassifications
cv_err <- mean(miss_rates)
# return the classifications and the misclassification error
return(list(class = class, cv_err = cv_err))
}
set.seed(123)
# remove NAs from penguins
penguins_no_NA <- na.omit(penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
# run the function with different values of k_nn
one_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 1,
k_cv = 5)
three_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 3,
k_cv = 5)
five_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 5,
k_cv = 5)
ten_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 10,
k_cv = 5)
twenty_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 20,
k_cv = 5)
# determine the training error for each value of k_nn
one_train_err <- mean(one_nn_cv[[1]] != my_cl)
three_train_err <- mean(three_nn_cv[[1]] != my_cl)
five_train_err <- mean(five_nn_cv[[1]] != my_cl)
ten_train_err <- mean(ten_nn_cv[[1]] != my_cl)
twenty_train_err <- mean(twenty_nn_cv[[1]] != my_cl)
# create a table with the results
my_table <- data.frame(k_nn = c(1, 3, 5, 10, 20),
cv_err = round(c(one_nn_cv[[2]],
three_nn_cv[[2]],
five_nn_cv[[2]],
ten_nn_cv[[2]],
twenty_nn_cv[[2]]), 4),
train_err = round(c(one_train_err,
three_train_err,
five_train_err,
ten_train_err,
twenty_train_err), 4))
kable_styling(kable(my_table))
set.seed(123)
# Function: my_rf_cv
# Description: runs k-fold cross validation for random forests using the penguins data set
# Input: k, the number of folds
# Output: the average MSE across all k folds
my_rf_cv <- function(k) {
# set the relevant columns of penguins as our data
data <- data.frame("body_mass" = penguins_no_NA$body_mass_g,
"bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm)
n <-  length(data[, 1])
# randomly assign each entry in the data set to a fold
fold <- sample(rep(1:k, length = n))
data$fold <- fold
MSEs <- c()
# loop through each fold
for (i in 1:k) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
rf_cv <- randomForest(body_mass ~ bill_length + bill_depth + flipper_length,
data = data_train, ntree = 100)
rf_pred <- predict(rf_cv, data_test[, -1])
# calculate the MSE for this fold
MSEs[i] <- mean((rf_pred - data_test[, 1])^2)
}
# return the average MSE across all k folds
return(mean(MSEs))
}
my_rf_cv(5)
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
train_miss <- c()
cv_miss <- c()
# find the training and cv misclassification rates for k_nn from 1 through 10
for(k_nn in 1:10) {
my_knn_cv_out <- my_knn_cv(data = my_data, cl = my_cl, k_nn = k_nn, k_cv = 5)
train_miss[knn] <- mean(my_knn_cv_out[[1]] != my_cl)
cv_miss[knn] <- my_knn_cv_out[[2]]
}
# create a table with the results
my_table <- data.frame(k_nn = 1:10,
cv_err = round(cv_miss, 4),
train_err = round(train_miss, 4))
rm(list = ls())
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
train_miss <- c()
cv_miss <- c()
# find the training and cv misclassification rates for k_nn from 1 through 10
for(k_nn in 1:10) {
my_knn_cv_out <- my_knn_cv(data = my_data, cl = my_cl, k_nn = k_nn, k_cv = 5)
train_miss[knn] <- mean(my_knn_cv_out[[1]] != my_cl)
cv_miss[knn] <- my_knn_cv_out[[2]]
}
devtools::document()
devtools::document()
my_knn_cv()
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
train_miss <- c()
cv_miss <- c()
# find the training and cv misclassification rates for k_nn from 1 through 10
for(k_nn in 1:10) {
my_knn_cv_out <- my_knn_cv(data = my_data, cl = my_cl, k_nn = k_nn, k_cv = 5)
train_miss[knn] <- mean(my_knn_cv_out[[1]] != my_cl)
cv_miss[knn] <- my_knn_cv_out[[2]]
}
my_knn_cv_out <- my_knn_cv(data = my_data, cl = my_cl, k_nn = 1, k_cv = 5)
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
train_miss <- c()
cv_miss <- c()
# find the training and cv misclassification rates for k_nn from 1 through 10
for(k_nn in 1:10) {
my_knn_cv_out <- my_knn_cv(data = my_data, cl = my_cl, k_nn = k_nn, k_cv = 5)
train_miss[k_nn] <- mean(my_knn_cv_out[[1]] != my_cl)
cv_miss[k_nn] <- my_knn_cv_out[[2]]
}
# create a table with the results
my_table <- data.frame(k_nn = 1:10,
cv_err = round(cv_miss, 4),
train_err = round(train_miss, 4))
kable_styling(kable(my_table))
devtools::check()
usethis::use_package("kableExtra")
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
train_miss <- c()
cv_miss <- c()
# find the training and cv misclassification rates for k_nn from 1 through 10
for(k_nn in 1:10) {
my_knn_cv_out <- my_knn_cv(data = my_data, cl = my_cl, k_nn = k_nn, k_cv = 5)
train_miss[k_nn] <- mean(my_knn_cv_out[[1]] != my_cl)
cv_miss[k_nn] <- my_knn_cv_out[[2]]
}
# create a table with the results
my_table <- data.frame(k_nn = 1:10,
cv_err = round(cv_miss, 4),
train_err = round(train_miss, 4))
kable_styling(kable(my_table))
usethis::use_package("class")
usethis::use_package("tidyverse")
usethis::use_package("randomForest")
devtools::document()
rm(list = ls())
devtools::check()
usethis::use_pipe()
devtools::document()
rm(list = ls())
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
train_miss <- c()
cv_miss <- c()
# find the training and cv misclassification rates for k_nn from 1 through 10
for(k_nn in 1:10) {
my_knn_cv_out <- my_knn_cv(data = my_data, cl = my_cl, k_nn = k_nn, k_cv = 5)
train_miss[k_nn] <- mean(my_knn_cv_out[[1]] != my_cl)
cv_miss[k_nn] <- my_knn_cv_out[[2]]
}
# create a table with the results
my_table <- data.frame(k_nn = 1:10,
cv_err = round(cv_miss, 4),
train_err = round(train_miss, 4))
kableExtra::kable_styling(kable(my_table))
devtools::check()
devtools::check()
devtools::check()
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
rm(list = ls())
devtools::document()
devtools::check()
# Function: my_knn_cv
# Description: runs k-fold cross validations for k-nearest neighbors
# Input: data, the input data frame (note in the document this is called train),
#        cl, the true class values of the data,
#        k_nn, an integer representing the number of neighbors for KNN,
#        k_cv, the number of folds
# Output: class, a vector of the predicted classes when KNN trains on the entire data set,
#         cv_err, the cross-validaiton misclassification error
my_knn_cv <- function(data, cl, k_nn, k_cv) {
n <-  length(data[, 1])
# randomly assign each entry in the data set to a fold
fold <- sample(rep(1:k_cv, length = n))
data$fold <- fold
cl <- data.frame(cl, fold)
miss_rates <- c()
# loop through each fold
for (i in 1:k_cv) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
cl_train <- (cl %>% filter(fold != i))[, 1]
cl_test <- (cl %>% filter(fold == i))[, 1]
# remove fold from the train/test data
data_train <- data_train[, -length(data_train)]
data_test <- data_test[, -length(data_test)]
knn_cv <- class::knn(train = data_train,
test = data_test,
cl = cl_train,
k = k_nn)
# record misclassification rates
miss_rates[i] <- mean(as.numeric(knn_cv != cl_test))
}
#remove fold from data
data <- data[, -length(data)]
class <- class::knn(train = data,
test = data,
cl = cl[, 1],
k = k_nn)
# calculate the proportion of misclassifications
cv_err <- mean(miss_rates)
# return the classifications and the misclassification error
return(list(class = class, cv_err = cv_err))
}
set.seed(123)
# remove NAs from penguins
penguins_no_NA <- na.omit(penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
# run the function with different values of k_nn
one_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 1,
k_cv = 5)
three_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 3,
k_cv = 5)
five_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 5,
k_cv = 5)
ten_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 10,
k_cv = 5)
twenty_nn_cv <- my_knn_cv(data = my_data,
cl = my_cl,
k_nn = 20,
k_cv = 5)
# determine the training error for each value of k_nn
one_train_err <- mean(one_nn_cv[[1]] != my_cl)
three_train_err <- mean(three_nn_cv[[1]] != my_cl)
five_train_err <- mean(five_nn_cv[[1]] != my_cl)
ten_train_err <- mean(ten_nn_cv[[1]] != my_cl)
twenty_train_err <- mean(twenty_nn_cv[[1]] != my_cl)
# create a table with the results
my_table <- data.frame(k_nn = c(1, 3, 5, 10, 20),
cv_err = round(c(one_nn_cv[[2]],
three_nn_cv[[2]],
five_nn_cv[[2]],
ten_nn_cv[[2]],
twenty_nn_cv[[2]]), 4),
train_err = round(c(one_train_err,
three_train_err,
five_train_err,
ten_train_err,
twenty_train_err), 4))
kable_styling(kable(my_table))
devtools::document()
rm(list = ls())
devtools::document()
devtools::check()
my_knn_cv(data = my_data, cl = my_cl, k_nn = 2, k_cv = 5)
devtools::check()
utils::globalVariables(c("bill_length_mm", "bill_depth_mm", "body_mass_g", "flipper_length_mm"))
# load the penguins data
data(my_penguins)
# remove NAs from penguins
penguins_no_NA <- stats::na.omit(my_penguins)
# separate the covariates and the true classification
my_data <- data.frame("bill_length" = penguins_no_NA$bill_length_mm,
"bill_depth" = penguins_no_NA$bill_depth_mm,
"flipper_length" = penguins_no_NA$flipper_length_mm,
"body_mass" = penguins_no_NA$body_mass_g)
my_cl <- penguins_no_NA$species
train_miss <- c()
cv_miss <- c()
# find the training and cv misclassification rates for k_nn from 1 through 10
for(k_nn in 1:10) {
my_knn_cv_out <- my_knn_cv(data = my_data, cl = my_cl, k_nn = k_nn, k_cv = 5)
train_miss[k_nn] <- mean(my_knn_cv_out[[1]] != my_cl)
cv_miss[k_nn] <- my_knn_cv_out[[2]]
}
# create a table with the results
my_table <- data.frame(k_nn = 1:10,
cv_err = round(cv_miss, 4),
train_err = round(train_miss, 4))
kableExtra::kable_styling(kableExtra::kable(my_table))
