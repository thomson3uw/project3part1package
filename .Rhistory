use_gpl3_license()
use_gpl3_license()
?t.test
rnorm(100)
my_t.test(x = rnorm(100), alternative = "two.sided", mu = 1)
my_t.test <- function(x, alternative = c("two.sided", "less", "greater"), mu) {
# check if x is truly a numeric vector
if (is.vector(x)) {
for (i in 1:length(x)) {
if (!is.numeric(x[i])) {
stop("non-numeric entries found in x")
}
}
}
else
{
stop("x must be a vector")
}
# check if mu is numeric
if (!is.numeric(mu)) {
stop("mu must be numeric")
}
# calculate the test statistic and degrees of freedom
std_err <- sd(x) / sqrt(length(x))
df <- length(x) - 1
mean_diff <- mean(x) - mu
test_stat <- mean_diff / std_err
# determine the p-value of the test
if (alternative == "two.sided") {
p_val <- 2 * pt(q = abs(test_stat), df = df, lower.tail = FALSE)
} else if (alternative == "less") {
p_val <- pt(q = test_stat, df = df, lower.tail = TRUE)
} else if (alternative == "greater") {
p_val <- pt(q = test_stat, df = df, lower.tail = FALSE)
} else {
stop("invalid input for alternative")
}
return(list(test_stat = test_stat, df = df, alternative = alternative, p_val = p_val))
}
my_t.test(x = rnorm(100), alternative = "two.sided", mu = 1)
my_t.test(x = 1:100, alternative = "greater", mu = 60)
devtools::document()
rm(list = c("my_t.test"))
devtools::document()
devtools::install()
library(project3part1package)
?my_t.test
?t.test
?my_t.test
devtools::check()
devtools::install_github("thomson3uw/project3part1package")
?my_t.test
library(project3part1package)
?my_t.test
usethis::use_readme_md()
usethis::use_github_action_check_standard()
devtools::check()
devtools::install_github()
getwd
getwd)
getwd()
usethis::use_readme_md()
usethis::use_github_action_check_standard()
usethis::use_testthat()
